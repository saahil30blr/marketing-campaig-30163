import psycopg2
import os
from datetime import date

# --- Database Connection ---
# Use environment variables for security in a real application
DB_NAME = "your_db_name"
DB_USER = "your_db_user"
DB_PASS = "your_db_password"
DB_HOST = "localhost"
DB_PORT = "5432"

def get_db_connection():
    """Establishes and returns a database connection."""
    conn = psycopg2.connect(
        dbname=DB_NAME, user=DB_USER, password=DB_PASS, host=DB_HOST, port=DB_PORT
    )
    return conn

# --- Campaign Management (CRUD) ---

def create_campaign(name, description, start_date, end_date, budget, channels):
    """CREATE: Adds a new campaign and its initial performance record."""
    conn = get_db_connection()
    cur = conn.cursor()
    # Use a transaction to ensure both inserts succeed or fail together
    try:
        cur.execute(
            """
            INSERT INTO campaigns (name, description, start_date, end_date, budget, channels)
            VALUES (%s, %s, %s, %s, %s, %s) RETURNING campaign_id;
            """,
            (name, description, start_date, end_date, budget, channels),
        )
        campaign_id = cur.fetchone()[0]
        # Create a corresponding performance record
        cur.execute(
            "INSERT INTO campaign_performance (campaign_id) VALUES (%s);",
            (campaign_id,),
        )
        conn.commit()
    except Exception as e:
        conn.rollback()
        raise e
    finally:
        cur.close()
        conn.close()

def read_all_campaigns():
    """READ: Retrieves all campaigns."""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT campaign_id, name, budget, start_date, end_date FROM campaigns ORDER BY start_date DESC;")
    campaigns = cur.fetchall()
    cur.close()
    conn.close()
    return campaigns

def update_campaign(campaign_id, name, description, start_date, end_date, budget, channels):
    """UPDATE: Modifies an existing campaign."""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        """
        UPDATE campaigns
        SET name = %s, description = %s, start_date = %s, end_date = %s, budget = %s, channels = %s
        WHERE campaign_id = %s;
        """,
        (name, description, start_date, end_date, budget, channels, campaign_id),
    )
    conn.commit()
    cur.close()
    conn.close()

def delete_campaign(campaign_id):
    """DELETE: Removes a campaign and its performance data (due to ON DELETE CASCADE)."""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("DELETE FROM campaigns WHERE campaign_id = %s;", (campaign_id,))
    conn.commit()
    cur.close()
    conn.close()

# --- Customer Management (CRUD) ---

def create_customer(name, email, region, last_purchase_date):
    """CREATE: Adds a new customer."""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        """
        INSERT INTO customers (name, email, region, last_purchase_date)
        VALUES (%s, %s, %s, %s);
        """,
        (name, email, region, last_purchase_date),
    )
    conn.commit()
    cur.close()
    conn.close()

def read_all_customers():
    """READ: Retrieves all customers."""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT customer_id, name, email, region, last_purchase_date FROM customers ORDER BY name;")
    customers = cur.fetchall()
    cur.close()
    conn.close()
    return customers

def read_customer_segment(region=None, purchase_after_date=None):
    """READ: Retrieves a dynamic segment of customers."""
    conn = get_db_connection()
    cur = conn.cursor()
    
    query = "SELECT customer_id, name, email FROM customers WHERE 1=1"
    params = []
    
    if region and region != "All":
        query += " AND region = %s"
        params.append(region)
    
    if purchase_after_date:
        query += " AND last_purchase_date >= %s"
        params.append(purchase_after_date)
        
    cur.execute(query, tuple(params))
    segment = cur.fetchall()
    cur.close()
    conn.close()
    return segment

# --- Performance Tracking (CRUD) ---

def read_performance_data(campaign_id):
    """READ: Gets performance data for a specific campaign."""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        """
        SELECT emails_sent, emails_opened, clicks, last_updated 
        FROM campaign_performance WHERE campaign_id = %s;
        """,
        (campaign_id,)
    )
    data = cur.fetchone()
    cur.close()
    conn.close()
    return data

def update_performance_metrics(campaign_id, emails_sent=0, emails_opened=0, clicks=0):
    """UPDATE: Increments performance metrics for a campaign."""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute(
        """
        UPDATE campaign_performance
        SET emails_sent = emails_sent + %s,
            emails_opened = emails_opened + %s,
            clicks = clicks + %s
        WHERE campaign_id = %s;
        """,
        (emails_sent, emails_opened, clicks, campaign_id),
    )
    conn.commit()
    cur.close()
    conn.close()

# --- Business Insights (Aggregate Queries) ---

def get_business_insights():
    """Calculates key business insights using aggregate functions."""
    conn = get_db_connection()
    cur = conn.cursor()
    
    # COUNT, SUM, AVG, MIN, MAX for campaigns
    cur.execute("""
        SELECT 
            COUNT(campaign_id),
            SUM(budget),
            AVG(budget),
            MIN(budget),
            MAX(budget)
        FROM campaigns;
    """)
    campaign_stats = cur.fetchone()

    # COUNT for customers
    cur.execute("SELECT COUNT(customer_id) FROM customers;")
    customer_count = cur.fetchone()[0]

    # SUM for performance metrics
    cur.execute("""
        SELECT 
            SUM(emails_sent),
            SUM(emails_opened),
            SUM(clicks)
        FROM campaign_performance;
    """)
    performance_totals = cur.fetchone()
    
    insights = {
        "campaign_count": campaign_stats[0] or 0,
        "total_budget": campaign_stats[1] or 0,
        "avg_budget": campaign_stats[2] or 0,
        "min_budget": campaign_stats[3] or 0,
        "max_budget": campaign_stats[4] or 0,
        "customer_count": customer_count or 0,
        "total_emails_sent": performance_totals[0] or 0,
        "total_emails_opened": performance_totals[1] or 0,
        "total_clicks": performance_totals[2] or 0,
    }
    
    cur.close()
    conn.close()
    return insights
